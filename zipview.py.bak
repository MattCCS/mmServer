"""
Zipview allows you to treat streams like ZIP files.
"""

import functools
import logging
import pathlib
import zipfile
from typing import Callable, Generator, ByteString

logger = logging.getLogger(__name__)


__all__ = [
    "zipview",
]


TSeekableStream = Callable[[int, int], Generator[ByteString]]


class StatefulStream:
    def __init__(self, stream: TSeekableStream, size: int):
        self._api = api
        self._hash = hash
        self._service = service
        self._size = size
        self._seek = 0

    def seekable(self):
        return True

    def seek(self, offset, whence=0):
        logger.debug(f"seek: offset={offset}, whence={whence}")
        if whence == 0:
            self._seek = offset
        elif whence == 1:
            self._seek = self._seek + offset
        elif whence == 2:
            self._seek = self._size + offset
        else:
            raise RuntimeError(f"invalid value for whence: {repr(whence)}")
        logger.debug(f"seek: new seek={self._seek}")

    def tell(self):
        out = self._seek
        logger.debug(f"tell: out={out}")
        return out

    def read(self, length=0):
        logger.debug("read: length=%i", length)
        if not length:
            length = self._size - self._seek

        out = b''.join(
            self._api.run_stream_range(
                pathlib.Path(),
                self._hash,
                self._seek,
                length,
                service_selector=self._service
            )
        )
        self._seek = min(self._seek + length, self._size)
        logger.debug(f"read: len(out)={len(out)}, new seek={self._seek}")
        return out


def mmzipview(api, hash, size, service=None):
    @functools.wraps(api.run_stream_range)
    def wrapper(offset, length):
        return api.run_stream_range(pathlib.Path(), hash, offset, length, service_selector=service)

    return zipview(wrapper)


def zipview(api, hash, size, service=None):
    stream = StatefulStream(api, hash, service, size)
    return zipfile.ZipFile(stream)
